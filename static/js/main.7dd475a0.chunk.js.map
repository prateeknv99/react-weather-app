{"version":3,"sources":["components/Navbar.js","components/Title.js","components/Form.js","components/Weather.js","App.js","registerServiceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","Component","Title","Form","props","onSubmit","call_getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","showWeather","getWeather","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","_this","target","elements","value","fetch","concat","sent","json","message","alert","setState","main","temp","sys","weather","stop","this","components_Navbar","components_Title","components_Form","components_Weather","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.7dd475a0.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Navbar extends Component {\n\n  render() {\n    return (\n      <nav className=\"Navbar\">\n        <div className=\"Nav1\" ></div>\n        <div className=\"Nav2\" ></div>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;\n","import React from 'react';\n\nconst Title = () => (\n  <div className=\"Title\" >\n    <h1>Weather Finder</h1>\n    <p>Find out Weather and much more!</p>\n  </div>\n);\n\nexport default Title;\n","import React from 'react';\n\nconst Form = props => {\n  return(\n    <form onSubmit={props.call_getWeather} className=\"Form\">\n      <input type=\"text\" name=\"city\" placeholder=\"City\" />\n      <input type=\"text\" name=\"country\" placeholder=\"Country\" />\n      <button>Get Weather</button>\n    </form>\n  );\n}\n\nexport default Form;\n","import React from 'react';\n\nconst Weather = props => {\n  return (\n    <div className=\"Weather\" >\n      { props.city && props.country && <p> Location : {props.city}, {props.country}</p> }\n      { props.temperature && <p> Temperature : {props.temperature}â„ƒ</p> }\n      { props.humidity && <p> Humidity : {props.humidity}%</p> }\n      { props.description && <p> Description : {props.description}</p> }\n      { props.error && <p> Error : {props.error}</p> }\n    </div>\n  );\n} \n\nexport default Weather;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport Title from './components/Title';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\n\nconst API_KEY = \"3593c0a7c6e770baef72f92b533ee1c4\";\n\nclass App extends Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined,\n    showWeather: false\n  }\n  getWeather = async (e) => {\n    e.preventDefault();\n    this.state.showWeather = true;\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    \n    if (city && country) {\n      const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\n      const data = await api_call.json();\n      if (data.message) {\n        alert(data.message);\n      }\n      else {\n        this.setState({\n          temperature: data.main.temp,\n          city: data.name,\n          country: data.sys.country,\n          humidity: data.main.humidity,\n          description: data.weather[0].description,\n          error: \"\"\n        });\n      }\n    }\n    else{\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: \"Please enter correct inputs!\"\n      });\n    }\n    // e.target.Weather.style.display = 'none';\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar />\n        <div className=\"Main\">\n          <Title />\n          <div className=\"Content\">\n            <Form call_getWeather={this.getWeather}/>\n            { this.state.showWeather ? \n              <Weather\n                temperature={this.state.temperature} \n                city={this.state.city} \n                country={this.state.country} \n                humidity={this.state.humidity} \n                description={this.state.description} \n                error={this.state.error}\n              /> : null }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}